//--------------------------------------------------------------------------------------------
//
// Generated by X-HDL VHDL Translator - Version 2.0.0 Feb. 1, 2011
// ?? 6? 4 2018 10:25:11
//
//      Input file      : 
//      Component name  : chongpai1
//      Author          : 
//      Company         : 
//
//      Description     : 
//
//
//--------------------------------------------------------------------------------------------


module Chongpai1(Rst, Clk_40, Prf_in, Data_I_in, Data_Q_in, Data_I_out, Data_Q_out, Prf_out);
   input         Rst;
   input         Clk_40;
   input         Prf_in;
   input [35:0]  Data_I_in;
   input [35:0]  Data_Q_in;
   output [35:0] Data_I_out;
   reg [35:0]    Data_I_out;
   output [35:0] Data_Q_out;
   reg [35:0]    Data_Q_out;
   output        Prf_out;
   reg           Prf_out;
   reg           Rst_flag;
   wire [35:0]   Data_I_in_temp;
   wire [35:0]   Data_Q_in_temp;
   reg [12:0]    rdadd;
   reg [12:0]    wradd;
   reg [12:0]    wradd_base;
   reg           rden0;
   reg           rden0_delay;
   reg           rden1;
   reg           wren0;
   reg           wren1;
   wire [35:0]   q0_I;
   wire [35:0]   q0_Q;
   wire [35:0]   q1_I;
   wire [35:0]   q1_Q;
   reg           Prf_in_flag;
   reg [1:0]     Prf_in_flag_cont;
   
   always @(posedge Clk_40)
      
      begin
         if (Rst == 1'b1)
         begin
            Rst_flag <= 1'b0;
            wren0 <= 1'b0;
            rden0 <= 1'b0;
            rden0_delay <= rden0;
            wren1 <= 1'b0;
            rden1 <= 1'b0;
            wradd <= {13{1'b1}};
            rdadd <= {13{1'b1}};
            wradd_base <= {13{1'b0}};
         end
         else
         begin
            rden0_delay <= rden0;
            if (Prf_in == 1'b1 & Rst_flag == 1'b0)
            begin
               Rst_flag <= 1'b1;
               wren0 <= 1'b1;
               wren1 <= 1'b0;
               rden0 <= 1'b0;
               rden1 <= 1'b1;
               wradd <= {13{1'b0}};
               rdadd <= {13{1'b0}};
               wradd_base <= 13'b0000000000001;
            end
            else if (Prf_in == 1'b1 & Rst_flag == 1'b1)
            begin
               wren0 <= (~wren0);
               wren1 <= (~wren1);
               rden0 <= (~rden0);
               rden1 <= (~rden1);
               wradd <= {13{1'b0}};
               rdadd <= {13{1'b0}};
               wradd_base <= 13'b0000000000001;
            end
            else
            begin
               rdadd <= rdadd + 1;
               if (wradd > 13'b1110111111111 & wradd < 13'b1111111111111)
               begin
                  wradd <= wradd_base;
                  wradd_base <= wradd_base + 1;
               end
               else
                  wradd <= wradd + 13'b0001000000000;
            end
         end
      end
   
   always @(posedge Clk_40)
      
      begin
         if (Rst == 1'b1)
         begin
            Data_I_out <= {36{1'b0}};
            Data_Q_out <= {36{1'b0}};
         end
         else
            if (rden0_delay == 1'b1)
            begin
               Data_I_out <= q0_I;
               Data_Q_out <= q0_Q;
            end
            else
            begin
               Data_I_out <= q1_I;
               Data_Q_out <= q1_Q;
            end
      end
   
   RAM0_I Ram0_I_u(.aclr(Rst), .clock(Clk_40), .data(Data_I_in), .rdaddress(rdadd), .rden(rden0), .wraddress(wradd), .wren(wren0), .q(q0_I));
   
   RAM0_I Ram0_Q_u(.aclr(Rst), .clock(Clk_40), .data(Data_Q_in), .rdaddress(rdadd), .rden(rden0), .wraddress(wradd), .wren(wren0), .q(q0_Q));
   
   RAM0_I Ram1_I_u(.aclr(Rst), .clock(Clk_40), .data(Data_I_in), .rdaddress(rdadd), .rden(rden1), .wraddress(wradd), .wren(wren1), .q(q1_I));
   
   RAM0_I Ram1_Q_u(.aclr(Rst), .clock(Clk_40), .data(Data_Q_in), .rdaddress(rdadd), .rden(rden1), .wraddress(wradd), .wren(wren1), .q(q1_Q));
   
   always @(posedge Clk_40)
      
      begin
         if (Rst == 1'b1)
         begin
            Prf_out <= 1'b0;
            Prf_in_flag <= 1'b0;
            Prf_in_flag_cont <= 2'b00;
         end
         else
            if (Prf_in == 1'b1)
               Prf_in_flag <= 1'b1;
            else if (Prf_in_flag == 1'b1)
            begin
               if (Prf_in_flag_cont == 2'b01)
               begin
                  Prf_out <= 1'b1;
                  Prf_in_flag <= 1'b0;
                  Prf_in_flag_cont <= 2'b00;
               end
               else
                  Prf_in_flag_cont <= Prf_in_flag_cont + 1;
            end
            else
               Prf_out <= 1'b0;
      end
   
endmodule
