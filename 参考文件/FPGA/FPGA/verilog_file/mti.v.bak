//--------------------------------------------------------------------------------------------
//
// Generated by X-HDL VHDL Translator - Version 2.0.0 Feb. 1, 2011
// ?? 6? 4 2018 10:29:17
//
//      Input file      : 
//      Component name  : mti
//      Author          : 
//      Company         : 
//
//      Description     : 
//
//
//--------------------------------------------------------------------------------------------


module Mti(Clk_40, Rst, Prf_in, Data_I_in, Data_Q_in, Data_I_out, Data_Q_out, Prf_out);
   input         Clk_40;
   input         Rst;
   input         Prf_in;
   input [32:0]  Data_I_in;
   input [32:0]  Data_Q_in;
   output [35:0] Data_I_out;
   reg [35:0]    Data_I_out;
   output [35:0] Data_Q_out;
   reg [35:0]    Data_Q_out;
   output        Prf_out;
   reg           Prf_out;
   reg [35:0]    Data_I_in_extend;
   reg [35:0]    data_Q_in_extend;
   reg [35:0]    Data_I_shift_buffer[1:0];
   reg [35:0]    Data_Q_shift_buffer[1:0];
   reg [3:0]     Cont;
   reg [35:0]    Add_I_result[2:0];
   reg [35:0]    Add_Q_result[2:0];
   reg           Prf_in_flag;
   
   always @(posedge Clk_40)
      
      begin
         Data_I_in_extend[35:33] <= {36{Data_I_in[32]}};
         Data_I_in_extend[32:0] <= Data_I_in[32:0];
         data_Q_in_extend[35:33] <= {36{Data_Q_in[32]}};
         data_Q_in_extend[32:0] <= Data_Q_in[32:0];
      end
   
   always @(posedge Clk_40)
      
      begin
         if (Prf_in == 1'b1)
         begin
            Cont <= 4'b1101;
            Data_I_shift_buffer[0] <= Data_I_in_extend;
            Data_Q_shift_buffer[0] <= data_Q_in_extend;
            Data_I_shift_buffer[1] <= Data_I_shift_buffer[0];
            Data_Q_shift_buffer[1] <= Data_Q_shift_buffer[0];
         end
         else
         begin
            Cont <= Cont + 1;
            Data_I_shift_buffer[0] <= Data_I_in_extend;
            Data_Q_shift_buffer[0] <= data_Q_in_extend;
            Data_I_shift_buffer[1] <= Data_I_shift_buffer[0];
            Data_Q_shift_buffer[1] <= Data_Q_shift_buffer[0];
         end
      end
   
   always @(posedge Clk_40)
      
      begin
         if (Rst == 1'b1)
         begin
            Add_I_result[0] <= 36'd0;
            Add_Q_result[0] <= 36'd0;
            Add_I_result[1] <= 36'd0;
            Add_Q_result[1] <= 36'd0;
            Add_I_result[2] <= 36'd0;
            Add_Q_result[2] <= 36'd0;
         end
         else
         begin
            Add_I_result[0] <= Data_I_in_extend - Data_I_shift_buffer[0];
            Add_Q_result[0] <= data_Q_in_extend - Data_Q_shift_buffer[0];
            Add_I_result[1] <= Data_I_shift_buffer[1] - Data_I_shift_buffer[0];
            Add_Q_result[1] <= Data_Q_shift_buffer[1] - Data_Q_shift_buffer[0];
            Add_I_result[2] <= Add_I_result[0] + Add_I_result[1];
            Add_Q_result[2] <= Add_Q_result[0] + Add_Q_result[1];
         end
      end
   
   always @(posedge Clk_40)
      
      begin
         if (Cont >= 4'b0010 & Cont <= 4'b1111)
         begin
            Data_I_out <= Add_I_result[2];
            Data_Q_out <= Add_Q_result[2];
         end
         else
         begin
            Data_I_out <= {36{1'b0}};
            Data_Q_out <= {36{1'b0}};
         end
      end
   
   always @(posedge Clk_40)
      
      begin
         if (Prf_in == 1'b1)
            Prf_in_flag <= 1'b1;
         else if (Prf_in_flag == 1'b1 & Cont == 4'b1111)
         begin
            Prf_in_flag <= 1'b0;
            Prf_out <= 1'b1;
         end
         else
            Prf_out <= 1'b0;
      end
   
endmodule
