//--------------------------------------------------------------------------------------------
//
// Generated by X-HDL VHDL Translator - Version 2.0.0 Feb. 1, 2011
// ?? 6? 10 2018 18:56:49
//
//      Input file      : 
//      Component name  : coherent_accumulation
//      Author          : 
//      Company         : 
//
//      Description     : 
//
//
//--------------------------------------------------------------------------------------------


module Coherent_accumulation(Rst, Prf_in, Clk_40, Data_I_in, Data_Q_in, Data_I_out, Data_Q_out, Prf_out);
   input         Rst;
   input         Prf_in;
   input         Clk_40;
   input [36:0]  Data_I_in;
   input [36:0]  Data_Q_in;
   output [39:0] Data_I_out;
   reg [39:0]    Data_I_out;
   output [39:0] Data_Q_out;
   reg [39:0]    Data_Q_out;
   output        Prf_out;
   reg           Prf_out;
   reg [39:0]    Accumulation_I_data[511:0];
   reg [39:0]    Accumulation_Q_data[511:0];
   reg [3:0]     Cont_row;
   reg [9:0]     Cont_line;
   wire [39:0]   Result_I_temp;
   wire [39:0]   Result_Q_temp;
   
   
   always @(negedge Clk_40)
      
      begin
         if (Rst == 1'b1)
         begin
            Cont_row <= 4'b0000;
            Cont_line <= 10'b0000000000;
         end
         else
            if (Prf_in == 1'b1)
            begin
               Cont_row <= 4'b0000;
               Cont_line <= 10'b0000000000;
            end
            else
            begin
               Cont_line <= Cont_line + 1;
               if (Cont_line == 10'b0111111111)
               begin
                  Cont_row <= Cont_row + 1;
                  Cont_line <= 10'b0000000000;
               end
            end
      end
   
   always @(posedge Clk_40)
   begin: xhdl0
      integer       i;
      
      begin
         if (Rst == 1'b1)
            for (i = 511; i >= 0; i = i - 1)
            begin
               Accumulation_I_data[i] <= {(39:0][511-0)+1{1'b0}};
               Accumulation_Q_data[i] <= {(39:0][511-0)+1{1'b0}};
            end
         else
            if (Prf_in == 1'b1)
               for (i = 510; i >= 0; i = i - 1)
               begin
                  Accumulation_I_data[i] <= {(39:0][511-0)+1{1'b0}};
                  Accumulation_Q_data[i] <= {(39:0][511-0)+1{1'b0}};
                  Accumulation_I_data[511] <= Result_I_temp;
                  Accumulation_Q_data[511] <= Result_Q_temp;
               end
            else if (Cont_row == 4'b0000 & Cont_line == 10'b0000000001)
            begin
               Accumulation_I_data[0] <= Result_I_temp;
               Accumulation_Q_data[0] <= Result_Q_temp;
               Accumulation_I_data[511] <= {(39:0][511-0)+1{1'b0}};
               Accumulation_Q_data[511] <= {(39:0][511-0)+1{1'b0}};
            end
            else if (Cont_row == 4'b1111 & Cont_line == 10'b0111111100)
            begin
               Accumulation_I_data[0] <= {(39:0][511-0)+1{1'b0}};
               Accumulation_Q_data[0] <= {(39:0][511-0)+1{1'b0}};
            end
            else
               if (Cont_line == 10'b0000000000)
               begin
                  Accumulation_I_data[511] <= Result_I_temp;
                  Accumulation_Q_data[511] <= Result_Q_temp;
               end
               else
               begin
                  Accumulation_I_data[Cont_line - 1] <= Result_I_temp;
                  Accumulation_Q_data[Cont_line - 1] <= Result_Q_temp;
               end
      end
   end
   
   always @(posedge Clk_40)
      
      begin
         if (Rst == 1'b1)
            Prf_out <= 1'b0;
         else
            if (Cont_row == 4'b1111 & Cont_line == 9'b000000001)
               Prf_out <= 1'b1;
            else
               Prf_out <= 1'b0;
      end
   
   always @(posedge Clk_40)
      
      begin
         if (Rst == 1'b1)
            Data_I_out <= {40{1'b0}};
         else
            if (Cont_row == 4'b1111 & Cont_line > 9'b000000000)
            begin
               Data_I_out <= Result_I_temp;
               Data_Q_out <= Result_Q_temp;
            end
            else if (Cont_row == 4'b0000 & Cont_line == 9'b000000000)
            begin
               Data_I_out <= Result_I_temp;
               Data_Q_out <= Result_Q_temp;
            end
            else
            begin
               Data_I_out <= {40{1'b0}};
               Data_Q_out <= {40{1'b0}};
            end
      end
   
   Coherent_Add I_U(.clock(Clk_40), .dataa({Data_I_in[36], Data_I_in[36], Data_I_in[36], Data_I_in}), .datab(Accumulation_I_data[Cont_line]), .result(Result_I_temp));
   
   Coherent_Add Q_U(.clock(Clk_40), .dataa({Data_Q_in[36], Data_Q_in[36], Data_Q_in[36], Data_Q_in}), .datab(Accumulation_Q_data[Cont_line]), .result(Result_Q_temp));
   
endmodule
