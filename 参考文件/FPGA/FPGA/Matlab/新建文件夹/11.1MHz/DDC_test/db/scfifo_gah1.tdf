--scfifo ADD_RAM_OUTPUT_REGISTER="ON" ALLOW_RWCYCLE_WHEN_FULL="OFF" ALMOST_EMPTY_VALUE=1 ALMOST_FULL_VALUE=5 DEVICE_FAMILY="Stratix II" LPM_NUMWORDS=7 LPM_SHOWAHEAD="OFF" lpm_width=18 lpm_widthu=3 OPTIMIZE_FOR_SPEED=5 OVERFLOW_CHECKING="OFF" UNDERFLOW_CHECKING="OFF" USE_EAB="ON" aclr almost_full clock data empty q rdreq sclr(gnd) usedw wrreq CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 CYCLONEII_M4K_COMPATIBILITY="ON" INTENDED_DEVICE_FAMILY="Stratix II" LOW_POWER_MODE="AUTO" lpm_hint="RAM_BLOCK_TYPE=Auto" RAM_BLOCK_TYPE="AUTO"
--VERSION_BEGIN 8.1 cbx_altdpram 2008:05:19:10:27:12:SJ cbx_altsyncram 2008:08:26:11:57:11:SJ cbx_cycloneii 2008:05:19:10:57:37:SJ cbx_fifo_common 2008:05:19:10:54:06:SJ cbx_lpm_add_sub 2008:05:19:10:49:01:SJ cbx_lpm_compare 2008:09:01:07:44:05:SJ cbx_lpm_counter 2008:05:19:10:42:20:SJ cbx_lpm_decode 2008:05:19:10:39:27:SJ cbx_lpm_mux 2008:05:19:10:30:36:SJ cbx_mgl 2008:08:08:15:16:18:SJ cbx_scfifo 2008:05:19:10:25:30:SJ cbx_stratix 2008:08:05:17:10:23:SJ cbx_stratixii 2008:08:07:13:54:47:SJ cbx_stratixiii 2008:07:11:13:32:02:SJ cbx_util_mgl 2008:07:18:09:58:54:SJ  VERSION_END


-- Copyright (C) 1991-2008 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION a_dpfifo_9l81 (aclr, clock, data[17..0], rreq, sclr, wreq)
RETURNS ( empty, q[17..0], usedw[2..0]);

--synthesis_resources = lut 8 ram_bits (AUTO) 144 reg 18 
SUBDESIGN scfifo_gah1
( 
	aclr	:	input;
	almost_full	:	output;
	clock	:	input;
	data[17..0]	:	input;
	empty	:	output;
	q[17..0]	:	output;
	rdreq	:	input;
	sclr	:	input;
	usedw[2..0]	:	output;
	wrreq	:	input;
) 
VARIABLE 
	dpfifo : a_dpfifo_9l81;
	dffe_af : dffe;
	comparison_af0	: WIRE;
	comparison_af1	: WIRE;
	comparison_af2	: WIRE;
	comparison_pre_af0	: WIRE;
	comparison_pre_af1	: WIRE;
	comparison_pre_af2	: WIRE;
	wire_af[2..0]	: WIRE;
	wire_pre_af[2..0]	: WIRE;

BEGIN 
	dpfifo.aclr = aclr;
	dpfifo.clock = clock;
	dpfifo.data[] = data[];
	dpfifo.rreq = rdreq;
	dpfifo.sclr = sclr;
	dpfifo.wreq = wrreq;
	dffe_af.clk = clock;
	dffe_af.clrn = (! aclr);
	dffe_af.d = ((dffe_af.q & (dffe_af.q $ (sclr # ((comparison_af2 & (! wrreq)) & rdreq)))) # ((! dffe_af.q) & ((((! sclr) & comparison_pre_af2) & wrreq) & (! rdreq))));
	almost_full = dffe_af.q;
	comparison_af0 = (dpfifo.usedw[0..0] $ wire_af[0..0]);
	comparison_af1 = ((dpfifo.usedw[1..1] $ wire_af[1..1]) & comparison_af0);
	comparison_af2 = ((dpfifo.usedw[2..2] $ wire_af[2..2]) & comparison_af1);
	comparison_pre_af0 = (dpfifo.usedw[0..0] $ wire_pre_af[0..0]);
	comparison_pre_af1 = ((dpfifo.usedw[1..1] $ wire_pre_af[1..1]) & comparison_pre_af0);
	comparison_pre_af2 = ((dpfifo.usedw[2..2] $ wire_pre_af[2..2]) & comparison_pre_af1);
	empty = dpfifo.empty;
	q[] = dpfifo.q[];
	usedw[] = dpfifo.usedw[];
	wire_af[] = ( B"0", B"1", B"0");
	wire_pre_af[] = ( B"0", B"1", B"1");
END;
--VALID FILE
